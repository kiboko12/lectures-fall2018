#!/usr/bin/env python

"""a quick script to turn audio files into time-domain plots
"""

__author__ = "Reed Essick <reed.essick@kicp.uchicago.edu>"

#-------------------------------------------------

from scipy.io import wavfile

import numpy as np
import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from argparse import ArgumentParser

### non-standard libraries
import filters

#-------------------------------------------------

parser = ArgumentParser()

parser.add_argument('source', type=str)

parser.add_argument('--tukey-alpha', default=0.1, type=float,
    help='the tukey alpha value used to generate window functions')

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('--fmax', default=np.infty, type=float)

args = parser.parse_args()
target = args.source[:-4]+'-fplot.png'

#-------------------------------------------------

if args.verbose:
    print('reading data from: '+args.source)
fs, data = wavfile.read(args.source)
N, ndim = data.shape

w = filters.tukey(N, alpha=args.tukey_alpha)

fig = plt.figure()
ax = fig.gca()

f = np.fft.fftshift(np.fft.fftfreq(N, d=1./fs))
fmax = min(args.fmax, 0.5*fs)
truth = np.abs(f)<=fmax
for d in range(ndim):
    ax.plot(f[truth], np.abs(np.fft.fftshift(np.fft.fft(data[:,d]*w)))[truth], alpha=0.5)

ax.set_xlabel('frequency')
ax.set_yscale('log')
ax.set_xlim(xmin=0, xmax=fmax)

if args.verbose:
    print('saving: '+target)
fig.savefig(target)
plt.close(fig)
